{
  "repository_name": "DRLND_Pr_2_Continuous_Control",
  "repository_path": "/home/snow/Documents/Projects/github-repositories/bkocis/DRLND_Pr_2_Continuous_Control",
  "analysis_timestamp": "2025-07-30T23:57:34.700598",
  "is_git_repo": true,
  "readme_files": [
    {
      "path": "README.md",
      "absolute_path": "/home/snow/Documents/Projects/github-repositories/bkocis/DRLND_Pr_2_Continuous_Control/README.md",
      "size": 8966,
      "content": "[//]: # (Image References)\n\n[image1]: https://user-images.githubusercontent.com/10624937/43851024-320ba930-9aff-11e8-8493-ee547c6af349.gif \"Trained Agent\"\n[image2]: https://user-images.githubusercontent.com/10624937/43851646-d899bf20-9b00-11e8-858c-29b5c2c94ccc.png \"Crawler\"\n\n### Udacity Deep Reinforcement Learning Nanodegree\n# Project 2: Continuous Control\n\n\n### Introduction\n\nIn this project we will train agent(s) for solving the [Reacher](https://github.com/Unity-Technologies/ml-agents/blob/master/docs/Learning-Environment-Examples.md#reacher) environment. In this environment, a double-jointed arm can move to target locations. A reward of +0.1 is provided for each step that the agent's hand is in the goal location. Thus, the goal of your agent is to maintain its position at the target location for as many time steps as possible.\n\n\n\n![Trained Agent][image1]\n\nThe observation space consists of 33 variables corresponding to position, rotation, velocity, and angular velocities of the arm. Each action is a vector with four numbers, corresponding to torque applicable to two joints. Every entry in the action vector should be a number between -1 and 1.\n\nFor this project, there are two separate versions of the Unity environment:\n- The first version contains a single agent.\n- The second version contains 20 identical agents, each with its own copy of the environment.  \n\nThe second version is useful for algorithms like [PPO](https://arxiv.org/pdf/1707.06347.pdf), [A3C](https://arxiv.org/pdf/1602.01783.pdf), and [D4PG](https://openreview.net/pdf?id=SyZipzbCb) that use multiple (non-interacting, parallel) copies of the same agent to distribute the task of gathering experience.  \n\n### Solving the Environment\n\nNote that your project submission need only solve one of the two versions of the environment.\n\n#### Option 1: Solve the First Version\n\nThe task is episodic, and in order to solve the environment,  your agent must get an average score of +30 over 100 consecutive episodes.\n\n#### Option 2: Solve the Second Version\n\nThe barrier for solving the second version of the environment is slightly different, to take into account the presence of many agents.  In particular, your agents must get an average score of +30 (over 100 consecutive episodes, and over all agents).  Specifically,\n- After each episode, we add up the rewards that each agent received (without discounting), to get a score for each agent.  This yields 20 (potentially different) scores.  We then take the average of these 20 scores.\n- This yields an **average score** for each episode (where the average is over all 20 agents).\n\nThe environment is considered solved, when the average (over 100 episodes) of those average scores is at least +30.\n\n<br>\n<br>\n\n---\n### Report\n\n__The final report summarizing the code implementation and my solution of the environemnt is in the [`report.md`](https://github.com/bkocis/DRLND_Pr_2_Continuous_Control/blob/master/report.md).__\n<br>\n\n---\n\n<br>\n<br>\n\n### Installation and Setup\n\n1. Download the environment from one of the links below.  You need only select the environment that matches your operating system:\n\n    - **_Version 1: One (1) Agent_**\n        - Linux: [click here](https://s3-us-west-1.amazonaws.com/udacity-drlnd/P2/Reacher/one_agent/Reacher_Linux.zip)\n        - Mac OSX: [click here](https://s3-us-west-1.amazonaws.com/udacity-drlnd/P2/Reacher/one_agent/Reacher.app.zip)\n        - Windows (32-bit): [click here](https://s3-us-west-1.amazonaws.com/udacity-drlnd/P2/Reacher/one_agent/Reacher_Windows_x86.zip)\n        - Windows (64-bit): [click here](https://s3-us-west-1.amazonaws.com/udacity-drlnd/P2/Reacher/one_agent/Reacher_Windows_x86_64.zip)\n\n    - **_Version 2: Twenty (20) Agents_**\n        - Linux: [click here](https://s3-us-west-1.amazonaws.com/udacity-drlnd/P2/Reacher/Reacher_Linux.zip)\n        - Mac OSX: [click here](https://s3-us-west-1.amazonaws.com/udacity-drlnd/P2/Reacher/Reacher.app.zip)\n        - Windows (32-bit): [click here](https://s3-us-west-1.amazonaws.com/udacity-drlnd/P2/Reacher/Reacher_Windows_x86.zip)\n        - Windows (64-bit): [click here](https://s3-us-west-1.amazonaws.com/udacity-drlnd/P2/Reacher/Reacher_Windows_x86_64.zip)\n\n    (_For Windows users_) Check out [this link](https://support.microsoft.com/en-us/help/827218/how-to-determine-whether-a-computer-is-running-a-32-bit-version-or-64) if you need help with determining if your computer is running a 32-bit version or 64-bit version of the Windows operating system.\n\n    (_For AWS_) If you'd like to train the agent on AWS (and have not [enabled a virtual screen](https://github.com/Unity-Technologies/ml-agents/blob/master/docs/Training-on-Amazon-Web-Service.md)), then please use [this link](https://s3-us-west-1.amazonaws.com/udacity-drlnd/P2/Reacher/one_agent/Reacher_Linux_NoVis.zip) (version 1) or [this link](https://s3-us-west-1.amazonaws.com/udacity-drlnd/P2/Reacher/Reacher_Linux_NoVis.zip) (version 2) to obtain the \"headless\" version of the environment.  You will **not** be able to watch the agent without enabling a virtual screen, but you will be able to train the agent.  (_To watch the agent, you should follow the instructions to [enable a virtual screen](https://github.com/Unity-Technologies/ml-agents/blob/master/docs/Training-on-Amazon-Web-Service.md), and then download the environment for the **Linux** operating system above._)\n\n2. Install things on local computer\n\nTo set up your python environment to run the code in this repository, follow the instructions below.\n\n  - 2.1. Create (and activate) a new environment with Python 3.6.\n\n  ```bash\n  conda create --name drlnd python=3.6\n  source activate drlnd  \n  or\n  virtualenv drlnd\n  source drlnd/bin/actiate\n  ```\n\n  2.2. Follow the instructions in [this repository](https://github.com/openai/gym) to perform a minimal install of OpenAI gym.  \n\t- Next, install the **classic control** environment group by following the instructions [here](https://github.com/openai/gym#classic-control).\n\t- Then, install the **box2d** environment group by following the instructions [here](https://github.com/openai/gym#box2d).\n\n  2.3. Clone the repository (if you haven't already!), and navigate to the `python/` folder.  Then, install several dependencies.\n```bash\ngit clone https://github.com/udacity/deep-reinforcement-learning.git\ncd deep-reinforcement-learning/python\npip install .\n```\n\n  2.4. Create an [IPython kernel](http://ipython.readthedocs.io/en/stable/install/kernel_install.html) for the `drlnd` environment.  \n```bash\npython -m ipykernel install --user --name drlnd --display-name \"drlnd\"\n```\n\n  2.5. Before running code in a notebook, change the kernel to match the `drlnd` environment by using the drop-down `Kernel` menu.\n\n\n\n\n\n### (Optional) Challenge: Crawler Environment\n\nAfter you have successfully completed the project, you might like to solve the more difficult **Crawl2.1. Create (and activate) a new environment with Python 3.6.\ner** environment.\n\n![Crawler][image2]\n\nIn this continuous control environment, the goal is to teach a creature with four legs to walk forward without falling.  \n\nYou can read more about this environment in the ML-Agents GitHub [here](https://github.com/Unity-Technologies/ml-agents/blob/master/docs/Learning-Environment-Examples.md#crawler).  To solve this harder task, you'll need to download a new Unity environment.  (**Note**: Udacity students should not submit a project with this new environment.)\n\nYou need only select the environment that matches your operating system:\n- Linux: [click here](https://s3-us-west-1.amazonaws.com/udacity-drlnd/P2/Crawler/Crawler_Linux.zip)\n- Mac OSX: [click here](https://s3-us-west-1.amazonaws.com/udacity-drlnd/P2/Crawler/Crawler.app.zip)\n- Windows (32-bit): [click here](https://s3-us-west-1.amazonaws.com/udacity-drlnd/P2/Crawler/Crawler_Windows_x86.zip)\n- Windows (64-bit): [click here](https://s3-us-west-1.amazonaws.com/udacity-drlnd/P2/Crawler/Crawler_Windows_x86_64.zip)\n\nThen, place the file in the `p2_continuous-control/` folder in the DRLND GitHub repository, and unzip (or decompress) the file.  Next, open `Crawler.ipynb` and follow the instructions to learn how to use the Python API to control the agent.\n\n(_For AWS_) If you'd like to train the agent on AWS (and have not [enabled a virtual screen](https://github.com/Unity-Technologies/ml-agents/blob/master/docs/Training-on-Amazon-Web-Service.md)), then please use [this link](https://s3-us-west-1.amazonaws.com/udacity-drlnd/P2/Crawler/Crawler_Linux_NoVis.zip) to obtain the \"headless\" version of the environment.  You will **not** be able to watch the agent without enabling a virtual screen, but you will be able to train the agent.  (_To watch the agent, you should follow the instructions to [enable a virtual screen](https://github.com/Unity-Technologies/ml-agents/blob/master/docs/Training-on-Amazon-Web-Service.md), and then download the environment for the **Linux** operating system above._)\n",
      "summary": "[//]: # (Image References) [image1]: https://user-images.githubusercontent.com/10624937/43851024-320ba930-9aff-11e8-8493-ee547c6af349.gif \"Trained Agent\" [image2]: https://user-images.githubusercontent.com/10624937/43851646-d899bf20-9b00-11e8-858c-29b5c2c94ccc.png \"Crawler\"",
      "line_count": 131,
      "word_count": 985,
      "last_modified": "2023-01-18T20:14:12.504967"
    }
  ],
  "file_structure": {
    "total_files": 33,
    "total_size": 16138460,
    "file_types": {
      ".md": 2,
      ".ipynb": 2,
      ".py": 2,
      ".pth": 4,
      ".log": 1,
      ".gif": 5,
      ".mp4": 9,
      ".mkv": 6,
      ".png": 2
    },
    "languages": {
      "Python": 2
    },
    "directories": [
      "assets"
    ],
    "largest_files": [
      [
        "assets/reacher_one_arm.gif",
        2133339
      ],
      [
        "assets/2019-11-30 15-53-58.mp4",
        1789109
      ],
      [
        "assets/2019-11-30 16-12-39.mp4",
        1271055
      ],
      [
        "assets/2019-11-30 19-44-16.mp4",
        1212515
      ],
      [
        "assets/2019-11-30 19-46-19.mp4",
        1075129
      ],
      [
        "assets/2019-11-30 19-45-49.mp4",
        1044558
      ],
      [
        "assets/2019-11-30 15-49-51.mp4",
        954808
      ],
      [
        "assets/2019-12-01_18-04-05.mkv",
        919062
      ],
      [
        "assets/2019-11-30 15-47-40.mp4",
        731781
      ],
      [
        "assets/reacher_20_arm.gif",
        602320
      ]
    ]
  },
  "technologies": {
    "frameworks": [],
    "tools": [],
    "databases": [],
    "deployment": [],
    "testing": [],
    "build_systems": []
  },
  "git_info": {
    "current_branch": "master",
    "last_commit": {
      "hash": "50071621928b7aea63ce37d2772de10b4987fc5b",
      "author_name": "Balazs Kocsis",
      "author_email": "balaz.kocis@gmail.com",
      "date": "Fri Dec 6 13:12:30 2019 +0100",
      "message": "updates"
    },
    "remote_url": "https://github.com/bkocis/DRLND_Pr_2_Continuous_Control.git"
  },
  "content_hash": "c3860854d0372fe874a8294efa94e5d7"
}