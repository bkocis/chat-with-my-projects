{
  "repository_name": "pie",
  "repository_path": "/home/snow/Documents/Projects/github-repositories/bkocis/pie",
  "analysis_timestamp": "2025-07-30T23:57:34.599998",
  "is_git_repo": true,
  "readme_files": [
    {
      "path": "README.md",
      "absolute_path": "/home/snow/Documents/Projects/github-repositories/bkocis/pie/README.md",
      "size": 869,
      "content": "####A few Ipython additions  \n#####Extending the 'logging' mode\nIpython has a logger function; enable it by uncommenting the following lines in the `ipython_config.py` file \n```python\n# The date format used by logging formatters for %(asctime)s\nc.TerminalIPythonApp.log_datefmt = '%Y-%m-%d %H:%M:%S'\n# The name of the logfile to use.\nc.TerminalInteractiveShell.logfile = '/home/sweethome/.mylog'\n# Start logging to the given file in append mode.\nc.TerminalInteractiveShell.logappend = '/home/sweethome/.ipython/profile_default/mylog'\n```\n\nTo distinguish each session, add the following lines to a `startup_01.py` file placed in the `startup` folder. \n\n```python\nfrom time import strftime\niip=get_ipython()\niip.logger.log_write(u\"# new sesstion \" + strftime('%D %H:%M:%S')+ \"=====================\"+\"\\n\")\n```\n\n#####Adding a few methods to py files in `startup` folder \n\n\n",
      "summary": "Ipython has a logger function; enable it by uncommenting the following lines in the `ipython_config.py` file ```python c.TerminalIPythonApp.log_datefmt = '%Y-%m-%d %H:%M:%S'",
      "line_count": 21,
      "word_count": 106,
      "last_modified": "2023-01-18T20:20:32.788675"
    },
    {
      "path": "combined_effect/README.md",
      "absolute_path": "/home/snow/Documents/Projects/github-repositories/bkocis/pie/combined_effect/README.md",
      "size": 342,
      "content": "\nextrac_and_work_with_df.py\n\n/home/mnost/Public/experiments/HyTh_redoo/E2_E3_E4_together/_results\n\nplot_zusammen.py\n\n/home/mnost/Public/experiments/Leichtenbrand/__Leich_Ekto_Endo_zusammen/_results\n\nplot_new_figure_for_bookchapter_abschluss.py\nplot_stuff.py\n\n/home/mnost/Public/temp_time/refine_new_temp_time_Aug_2016/refinement_NEW/_results\n",
      "summary": "extrac_and_work_with_df.py /home/mnost/Public/experiments/HyTh_redoo/E2_E3_E4_together/_results plot_zusammen.py",
      "line_count": 12,
      "word_count": 7,
      "last_modified": "2023-01-18T20:20:32.792675"
    },
    {
      "path": "startup/README.md",
      "absolute_path": "/home/snow/Documents/Projects/github-repositories/bkocis/pie/startup/README.md",
      "size": 389,
      "content": "#####Startup py files\n\nIpytho loads numbered .py files in the `startup` folder automatically.\nA few py files containing functions that extend the common usage of existing methods.\n\n- `natural sort`\n\tSort by ascending alpha-numeric order of the element in lists, arrays \n\n- `fopen` \n\ta minor convolution of file opening methods to simplify opening access of various type of textual files \n\n",
      "summary": "Ipytho loads numbered .py files in the `startup` folder automatically. A few py files containing functions that extend the common usage of existing methods. - `natural sort`",
      "line_count": 10,
      "word_count": 60,
      "last_modified": "2023-01-18T20:20:33.096678"
    },
    {
      "path": "Nenad/README.md",
      "absolute_path": "/home/snow/Documents/Projects/github-repositories/bkocis/pie/Nenad/README.md",
      "size": 1,
      "content": "\n",
      "summary": "",
      "line_count": 1,
      "word_count": 0,
      "last_modified": "2023-01-18T20:20:32.788675"
    },
    {
      "path": "algorRun_original/README.md",
      "absolute_path": "/home/snow/Documents/Projects/github-repositories/bkocis/pie/algorRun_original/README.md",
      "size": 88,
      "content": "# test\nfirst upload 12-03-2016\nmake documentation using sphinx \n\n\nmerge test from mare \n",
      "summary": "first upload 12-03-2016 make documentation using sphinx merge test from mare",
      "line_count": 6,
      "word_count": 13,
      "last_modified": "2023-01-18T20:20:32.788675"
    },
    {
      "path": "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tk8.5/demos/README",
      "absolute_path": "/home/snow/Documents/Projects/github-repositories/bkocis/pie/nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tk8.5/demos/README",
      "size": 2141,
      "content": "This directory contains a collection of programs to demonstrate\nthe features of the Tk toolkit.  The programs are all scripts for\n\"wish\", a windowing shell.  If wish has been installed on your path\nthen you can invoke any of the programs in this directory just\nby typing its file name to your command shell under Unix.  Otherwise\ninvoke wish with the file as its first argument, e.g., \"wish hello\".\nThe rest of this file contains a brief description of each program.\nFiles with names ending in \".tcl\" are procedure packages used by one\nor more of the demo programs;  they can't be used as programs by\nthemselves so they aren't described below.\n\nhello -\t\tCreates a single button;  if you click on it, a message\n\t\tis typed and the application terminates.\n\nwidget -\tContains a collection of demonstrations of the widgets\n\t\tcurrently available in the Tk library.  Most of the .tcl\n\t\tfiles are scripts for individual demos available through\n\t\tthe \"widget\" program.\n\nixset -\t\tA simple Tk-based wrapper for the \"xset\" program, which\n\t\tallows you to interactively query and set various X options\n\t\tsuch as mouse acceleration and bell volume.  Thanks to\n\t\tPierre David for contributing this example.\n\nrolodex -\tA mock-up of a simple rolodex application.  It has much of\n\t\tthe user interface for such an application but no back-end\n\t\tdatabase.  This program was written in response to Tom\n\t\tLaStrange's toolkit benchmark challenge.\n\ntcolor -\tA color editor.  Allows you to edit colors in several\n\t\tdifferent ways, and will also perform automatic updates\n\t\tusing \"send\".\n\nrmt -\t\tAllows you to \"hook-up\" remotely to any Tk application\n\t\ton the display.  Select an application with the menu,\n\t\tthen just type commands:  they'll go to that application.\n\ntimer -\t\tDisplays a seconds timer with start and stop buttons.\n\t\tControl-c and control-q cause it to exit.\n\nbrowse -\tA simple directory browser.  Invoke it with and argument\n\t\tgiving the name of the directory you'd like to browse.\n\t\tDouble-click on files or subdirectories to browse them.\n\t\tControl-c and control-q cause the program to exit.\n\nRCS: @(#) $Id: README,v 1.3 2003/11/05 13:20:21 dkf Exp $\n",
      "summary": "This directory contains a collection of programs to demonstrate the features of the Tk toolkit.  The programs are all scripts for \"wish\", a windowing shell.  If wish has been installed on your path",
      "line_count": 46,
      "word_count": 350,
      "last_modified": "2023-01-18T20:20:33.048678"
    },
    {
      "path": "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tk8.5/images/README",
      "absolute_path": "/home/snow/Documents/Projects/github-repositories/bkocis/pie/nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tk8.5/images/README",
      "size": 388,
      "content": "README - images directory\n\nRCS: @(#) $Id: README,v 1.2 1998/09/14 18:23:32 stanton Exp $\n\n\nThis directory includes images for the Tcl Logo and the Tcl Powered\nLogo.  Please feel free to use the Tcl Powered Logo on any of your\nproducts that employ the use of Tcl or Tk.  The Tcl logo may also be\nused to promote Tcl in your product documentation, web site or other\nplaces you so desire.\n\n\n",
      "summary": "README - images directory RCS: @(#) $Id: README,v 1.2 1998/09/14 18:23:32 stanton Exp $ This directory includes images for the Tcl Logo and the Tcl Powered",
      "line_count": 10,
      "word_count": 71,
      "last_modified": "2023-01-18T20:20:33.048678"
    },
    {
      "path": "nja2dat_simplified/v_1.o/nja2dat_v1.0/mpl-data/sample_data/README.txt",
      "absolute_path": "/home/snow/Documents/Projects/github-repositories/bkocis/pie/nja2dat_simplified/v_1.o/nja2dat_v1.0/mpl-data/sample_data/README.txt",
      "size": 128,
      "content": "This is the sample data needed for some of matplotlib's examples and\ndocs.  See matplotlib.cbook.get_sample_data for more info.\n",
      "summary": "This is the sample data needed for some of matplotlib's examples and docs.  See matplotlib.cbook.get_sample_data for more info.",
      "line_count": 2,
      "word_count": 18,
      "last_modified": "2023-01-18T20:20:32.920676"
    },
    {
      "path": "nja2dat_simplified/v_1.o/nja2dat_v1.0/mpl-data/fonts/ttf/README.TXT",
      "absolute_path": "/home/snow/Documents/Projects/github-repositories/bkocis/pie/nja2dat_simplified/v_1.o/nja2dat_v1.0/mpl-data/fonts/ttf/README.TXT",
      "size": 320,
      "content": "Contained herin is the Bitstream Vera font family.\n\nThe Copyright information is found in the COPYRIGHT.TXT file (along\nwith being incoporated into the fonts themselves).\n\nThe releases notes are found in the file \"RELEASENOTES.TXT\".\n\nWe hope you enjoy Vera!\n\n                        Bitstream, Inc.\n\t\t\tThe Gnome Project\n",
      "summary": "Contained herin is the Bitstream Vera font family. The Copyright information is found in the COPYRIGHT.TXT file (along with being incoporated into the fonts themselves).",
      "line_count": 11,
      "word_count": 44,
      "last_modified": "2023-01-18T20:20:32.908676"
    },
    {
      "path": "nja2dat_simplified/v_1.o/nja2dat_v1.0/mpl-data/fonts/pdfcorefonts/readme.txt",
      "absolute_path": "/home/snow/Documents/Projects/github-repositories/bkocis/pie/nja2dat_simplified/v_1.o/nja2dat_v1.0/mpl-data/fonts/pdfcorefonts/readme.txt",
      "size": 828,
      "content": "Font Metrics for the 14 PDF Core Fonts\n======================================\n\nThis directory contains font metrics for the 14 PDF Core Fonts,\ndownloaded from Adobe. The title and this paragraph were added by\nMatplotlib developers. The download URL was\n<http://partners.adobe.com/public/developer/font/index.html>.\n\nThis file and the 14 PostScript(R) AFM files it accompanies may be used, copied, \nand distributed for any purpose and without charge, with or without modification, \nprovided that all copyright notices are retained; that the AFM files are not \ndistributed without this file; that all modifications to this file or any of \nthe AFM files are prominently noted in the modified file(s); and that this \nparagraph is not modified. Adobe Systems has no responsibility or obligation \nto support the use of the AFM files.\n",
      "summary": "Font Metrics for the 14 PDF Core Fonts ====================================== This directory contains font metrics for the 14 PDF Core Fonts,",
      "line_count": 15,
      "word_count": 122,
      "last_modified": "2023-01-18T20:20:32.908676"
    },
    {
      "path": "nja2dat_simplified/v_2.o/source/README-MemoryModule.txt",
      "absolute_path": "/home/snow/Documents/Projects/github-repositories/bkocis/pie/nja2dat_simplified/v_2.o/source/README-MemoryModule.txt",
      "size": 19252,
      "content": ":Author: Joachim Bauch\n:Contact: mail@joachim-bauch.de\n\n\n.. contents::\n\n\nOverview\n=========\n\nThe default windows API functions to load external libraries into a program\n(LoadLibrary, LoadLibraryEx) only work with files on the filesystem.  It's\ntherefore impossible to load a DLL from memory.\nBut sometimes, you need exactly this functionality (e.g. you don't want to\ndistribute a lot of files or want to make disassembling harder).  Common\nworkarounds for this problems are to write the DLL into a temporary file\nfirst and import it from there.  When the program terminates, the temporary\nfile gets deleted.\n\nIn this tutorial, I will describe first, how DLL files are structured and\nwill present some code that can be used to load a DLL completely from memory -\nwithout storing on the disk first.\n\n\nWindows executables - the PE format\n====================================\n\nMost windows binaries that can contain executable code (.exe, .dll, .sys)\nshare a common file format that consists of the following parts:\n\n+----------------+\n| DOS header     |\n|                |\n| DOS stub       |\n+----------------+\n| PE header      |\n+----------------+\n| Section header |\n+----------------+\n| Section 1      |\n+----------------+\n| Section 2      |\n+----------------+\n| . . .          |\n+----------------+\n| Section n      |\n+----------------+\n\nAll structures given below can be found in the header file `winnt.h`.\n\n\nDOS header / stub\n------------------\n\nThe DOS header is only used for backwards compatibility.  It precedes the DOS\nstub that normally just displays an error message about the program not being\nable to be run from DOS mode.\n\nMicrosoft defines the DOS header as follows::\n    \n    typedef struct _IMAGE_DOS_HEADER {      // DOS .EXE header\n        WORD   e_magic;                     // Magic number\n        WORD   e_cblp;                      // Bytes on last page of file\n        WORD   e_cp;                        // Pages in file\n        WORD   e_crlc;                      // Relocations\n        WORD   e_cparhdr;                   // Size of header in paragraphs\n        WORD   e_minalloc;                  // Minimum extra paragraphs needed\n        WORD   e_maxalloc;                  // Maximum extra paragraphs needed\n        WORD   e_ss;                        // Initial (relative) SS value\n        WORD   e_sp;                        // Initial SP value\n        WORD   e_csum;                      // Checksum\n        WORD   e_ip;                        // Initial IP value\n        WORD   e_cs;                        // Initial (relative) CS value\n        WORD   e_lfarlc;                    // File address of relocation table\n        WORD   e_ovno;                      // Overlay number\n        WORD   e_res[4];                    // Reserved words\n        WORD   e_oemid;                     // OEM identifier (for e_oeminfo)\n        WORD   e_oeminfo;                   // OEM information; e_oemid specific\n        WORD   e_res2[10];                  // Reserved words\n        LONG   e_lfanew;                    // File address of new exe header\n      } IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;\n\n\nPE header\n----------\n\nThe PE header contains informations about the different sections inside the\nexecutable that are used to store code and data or to define imports from other\nlibraries or exports this libraries provides.\n\nIt's defined as follows::\n\n    typedef struct _IMAGE_NT_HEADERS {\n        DWORD Signature;\n        IMAGE_FILE_HEADER FileHeader;\n        IMAGE_OPTIONAL_HEADER32 OptionalHeader;\n    } IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;\n\nThe `FileHeader` describes the *physical* format of the file, i.e. contents, informations\nabout symbols, etc::\n\n    typedef struct _IMAGE_FILE_HEADER {\n        WORD    Machine;\n        WORD    NumberOfSections;\n        DWORD   TimeDateStamp;\n        DWORD   PointerToSymbolTable;\n        DWORD   NumberOfSymbols;\n        WORD    SizeOfOptionalHeader;\n        WORD    Characteristics;\n    } IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;\n\n.. _OptionalHeader:\n\nThe `OptionalHeader` contains informations about the *logical* format of the library, \nincluding required OS version, memory requirements and entry points::\n\n    typedef struct _IMAGE_OPTIONAL_HEADER {\n        //\n        // Standard fields.\n        //\n    \n        WORD    Magic;\n        BYTE    MajorLinkerVersion;\n        BYTE    MinorLinkerVersion;\n        DWORD   SizeOfCode;\n        DWORD   SizeOfInitializedData;\n        DWORD   SizeOfUninitializedData;\n        DWORD   AddressOfEntryPoint;\n        DWORD   BaseOfCode;\n        DWORD   BaseOfData;\n    \n        //\n        // NT additional fields.\n        //\n    \n        DWORD   ImageBase;\n        DWORD   SectionAlignment;\n        DWORD   FileAlignment;\n        WORD    MajorOperatingSystemVersion;\n        WORD    MinorOperatingSystemVersion;\n        WORD    MajorImageVersion;\n        WORD    MinorImageVersion;\n        WORD    MajorSubsystemVersion;\n        WORD    MinorSubsystemVersion;\n        DWORD   Win32VersionValue;\n        DWORD   SizeOfImage;\n        DWORD   SizeOfHeaders;\n        DWORD   CheckSum;\n        WORD    Subsystem;\n        WORD    DllCharacteristics;\n        DWORD   SizeOfStackReserve;\n        DWORD   SizeOfStackCommit;\n        DWORD   SizeOfHeapReserve;\n        DWORD   SizeOfHeapCommit;\n        DWORD   LoaderFlags;\n        DWORD   NumberOfRvaAndSizes;\n        IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];\n    } IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;\n\n.. _DataDirectory:\n\nThe `DataDirectory` contains 16 (`IMAGE_NUMBEROF_DIRECTORY_ENTRIES`) entries\ndefining the logical components of the library:\n\n===== ==========================\nIndex Description\n===== ==========================\n0     Exported functions\n----- --------------------------\n1     Imported functions\n----- --------------------------\n2     Resources\n----- --------------------------\n3     Exception informations\n----- --------------------------\n4     Security informations\n----- --------------------------\n5     Base relocation table\n----- --------------------------\n6     Debug informations\n----- --------------------------\n7     Architecture specific data\n----- --------------------------\n8     Global pointer\n----- --------------------------\n9     Thread local storage\n----- --------------------------\n10    Load configuration\n----- --------------------------\n11    Bound imports\n----- --------------------------\n12    Import address table\n----- --------------------------\n13    Delay load imports\n----- --------------------------\n14    COM runtime descriptor\n===== ==========================\n\nFor importing the DLL we only need the entries describing the imports and the\nbase relocation table.  In order to provide access to the exported functions,\nthe exports entry is required.\n\n\nSection header\n---------------\n\nThe section header is stored after the OptionalHeader_ structure in the PE\nheader.  Microsoft provides the macro `IMAGE_FIRST_SECTION` to get the start\naddress based on the PE header.\n\nActually, the section header is a list of informations about each section in\nthe file::\n\n    typedef struct _IMAGE_SECTION_HEADER {\n        BYTE    Name[IMAGE_SIZEOF_SHORT_NAME];\n        union {\n                DWORD   PhysicalAddress;\n                DWORD   VirtualSize;\n        } Misc;\n        DWORD   VirtualAddress;\n        DWORD   SizeOfRawData;\n        DWORD   PointerToRawData;\n        DWORD   PointerToRelocations;\n        DWORD   PointerToLinenumbers;\n        WORD    NumberOfRelocations;\n        WORD    NumberOfLinenumbers;\n        DWORD   Characteristics;\n    } IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;\n\nA section can contain code, data, relocation informations, resources, export or\nimport definitions, etc.\n\n\nLoading the library\n====================\n\nTo emulate the PE loader, we must first understand, which steps are neccessary\nto load the file to memory and prepare the structures so they can be called from\nother programs.\n\nWhen issuing the API call `LoadLibrary`, Windows basically performs these tasks:\n\n1. Open the given file and check the DOS and PE headers.\n\n2. Try to allocate a memory block of `PEHeader.OptionalHeader.SizeOfImage` bytes\n   at position `PEHeader.OptionalHeader.ImageBase`.\n   \n3. Parse section headers and copy sections to their addresses.  The destination\n   address for each section, relative to the base of the allocated memory block,\n   is stored in the `VirtualAddress` attribute of the `IMAGE_SECTION_HEADER`\n   structure.\n   \n4. If the allocated memory block differs from `ImageBase`, various references in\n   the code and/or data sections must be adjusted.  This is called *Base\n   relocation*.\n   \n5. The required imports for the library must be resolved by loading the\n   corresponding libraries.\n   \n6. The memory regions of the different sections must be protected depending on\n   the section's characteristics.  Some sections are marked as *discardable*\n   and therefore can be safely freed at this point.  These sections normally\n   contain temporary data that is only needed during the import, like the\n   informations for the base relocation.\n   \n7. Now the library is loaded completely.  It must be notified about this by\n   calling the entry point using the flag `DLL_PROCESS_ATTACH`.\n\nIn the following paragraphs, each step is described.\n\n\nAllocate memory\n----------------\n\nAll memory required for the library must be reserved / allocated using\n`VirtualAlloc`, as Windows provides functions to protect these memory blocks.\nThis is required to restrict access to the memory, like blocking write access\nto the code or constant data.\n\nThe OptionalHeader_ structure defines the size of the required memory block\nfor the library.  It must be reserved at the address specified by `ImageBase`\nif possible::\n\n    memory = VirtualAlloc((LPVOID)(PEHeader->OptionalHeader.ImageBase),\n        PEHeader->OptionalHeader.SizeOfImage,\n        MEM_RESERVE,\n        PAGE_READWRITE);\n\nIf the reserved memory differs from the address given in `ImageBase`, base\nrelocation as described below must be done.\n\n\nCopy sections\n--------------\n\nOnce the memory has been reserved, the file contents can be copied to the\nsystem.  The section header must get evaluated in order to determine the\nposition in the file and the target area in memory.\n\nBefore copying the data, the memory block must get committed::\n\n    dest = VirtualAlloc(baseAddress + section->VirtualAddress,\n        section->SizeOfRawData,\n        MEM_COMMIT,\n        PAGE_READWRITE);\n\nSections without data in the file (like data sections for the used variables)\nhave a `SizeOfRawData` of `0`, so you can use the `SizeOfInitializedData`\nor `SizeOfUninitializedData` of the OptionalHeader_.  Which one must get\nchoosen depending on the bit flags `IMAGE_SCN_CNT_INITIALIZED_DATA` and\n`IMAGE_SCN_CNT_UNINITIALIZED_DATA` that may be set in the section`s\ncharacteristics.\n\n\nBase relocation\n----------------\n\nAll memory addresses in the code / data sections of a library are stored relative\nto the address defined by `ImageBase` in the OptionalHeader_.  If the library\ncan't be imported to this memory address, the references must get adjusted\n=> *relocated*.  The file format helps for this by storing informations about\nall these references in the base relocation table, which can be found in the\ndirectory entry 5 of the DataDirectory_ in the OptionalHeader_.\n\nThis table consists of a series of this structure\n\n::\n\n    typedef struct _IMAGE_BASE_RELOCATION {\n        DWORD   VirtualAddress;\n        DWORD   SizeOfBlock;\n    } IMAGE_BASE_RELOCATION;\n\nIt contains `(SizeOfBlock - IMAGE_SIZEOF_BASE_RELOCATION) / 2` entries of 16 bits\neach.  The upper 4 bits define the type of relocation, the lower 12 bits define\nthe offset relative to the `VirtualAddress`.\n\nThe only types that seem to be used in DLLs are\n\nIMAGE_REL_BASED_ABSOLUTE\n    No operation relocation.  Used for padding.\nIMAGE_REL_BASED_HIGHLOW\n    Add the delta between the `ImageBase` and the allocated memory block to the\n    32 bits found at the offset.\n\n\nResolve imports\n----------------\n\nThe directory entry 1 of the DataDirectory_ in the OptionalHeader_ specifies\na list of libraries to import symbols from.  Each entry in this list is defined\nas follows::\n\n    typedef struct _IMAGE_IMPORT_DESCRIPTOR {\n        union {\n            DWORD   Characteristics;            // 0 for terminating null import descriptor\n            DWORD   OriginalFirstThunk;         // RVA to original unbound IAT (PIMAGE_THUNK_DATA)\n        };\n        DWORD   TimeDateStamp;                  // 0 if not bound,\n                                                // -1 if bound, and real date\\time stamp\n                                                //     in IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT (new BIND)\n                                                // O.W. date/time stamp of DLL bound to (Old BIND)\n    \n        DWORD   ForwarderChain;                 // -1 if no forwarders\n        DWORD   Name;\n        DWORD   FirstThunk;                     // RVA to IAT (if bound this IAT has actual addresses)\n    } IMAGE_IMPORT_DESCRIPTOR;\n\nThe `Name` entry describes the offset to the NULL-terminated string of the library\nname (e.g. `KERNEL32.DLL`).  The `OriginalFirstThunk` entry points to a list\nof references to the function names to import from the external library.\n`FirstThunk` points to a list of addresses that gets filled with pointers to\nthe imported symbols.\n\nWhen we resolve the imports, we walk both lists in parallel, import the function\ndefined by the name in the first list and store the pointer to the symbol in the\nsecond list::\n\n    nameRef = (DWORD *)(baseAddress + importDesc->OriginalFirstThunk);\n    symbolRef = (DWORD *)(baseAddress + importDesc->FirstThunk);\n    for (; *nameRef; nameRef++, symbolRef++)\n    {\n        PIMAGE_IMPORT_BY_NAME thunkData = (PIMAGE_IMPORT_BY_NAME)(codeBase + *nameRef);\n        *symbolRef = (DWORD)GetProcAddress(handle, (LPCSTR)&thunkData->Name);\n        if (*funcRef == 0)\n        {\n            handleImportError();\n            return;\n        }\n    }\n\n\nProtect memory\n---------------\n\nEvery section specifies permission flags in it's `Characteristics` entry.\nThese flags can be one or a combination of\n\nIMAGE_SCN_MEM_EXECUTE\n    The section contains data that can be executed.\n    \nIMAGE_SCN_MEM_READ\n    The section contains data that is readable.\n    \nIMAGE_SCN_MEM_WRITE\n    The section contains data that is writeable.\n\nThese flags must get mapped to the protection flags\n\n- PAGE_NOACCESS\n- PAGE_WRITECOPY\n- PAGE_READONLY\n- PAGE_READWRITE\n- PAGE_EXECUTE\n- PAGE_EXECUTE_WRITECOPY\n- PAGE_EXECUTE_READ\n- PAGE_EXECUTE_READWRITE\n\nNow, the function `VirtualProtect` can be used to limit access to the memory.\nIf the program tries to access it in a unauthorized way, an exception gets\nraised by Windows.\n\nIn addition the section flags above, the following can be added:\n\nIMAGE_SCN_MEM_DISCARDABLE\n    The data in this section can be freed after the import.  Usually this is\n    specified for relocation data.\n    \nIMAGE_SCN_MEM_NOT_CACHED\n    The data in this section must not get cached by Windows.  Add the bit\n    flag `PAGE_NOCACHE` to the protection flags above.\n\n\nNotify library\n---------------\n\nThe last thing to do is to call the DLL entry point (defined by\n`AddressOfEntryPoint`) and so notifying the library about being attached\nto a process.\n\nThe function at the entry point is defined as\n\n::\n    \n    typedef BOOL (WINAPI *DllEntryProc)(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved);\n\nSo the last code we need to execute is\n\n::\n\n\tDllEntryProc entry = (DllEntryProc)(baseAddress + PEHeader->OptionalHeader.AddressOfEntryPoint);\n\t(*entry)((HINSTANCE)baseAddress, DLL_PROCESS_ATTACH, 0);\n\nAfterwards we can use the exported functions as with any normal library.\n\n\nExported functions\n===================\n\nIf you want to access the functions that are exported by the library, you need to find the entry\npoint to a symbol, i.e. the name of the function to call.\n\nThe directory entry 0 of the DataDirectory_ in the OptionalHeader_ contains informations about\nthe exported functions. It's defined as follows::\n\n    typedef struct _IMAGE_EXPORT_DIRECTORY {\n        DWORD   Characteristics;\n        DWORD   TimeDateStamp;\n        WORD    MajorVersion;\n        WORD    MinorVersion;\n        DWORD   Name;\n        DWORD   Base;\n        DWORD   NumberOfFunctions;\n        DWORD   NumberOfNames;\n        DWORD   AddressOfFunctions;     // RVA from base of image\n        DWORD   AddressOfNames;         // RVA from base of image\n        DWORD   AddressOfNameOrdinals;  // RVA from base of image\n    } IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;\n\nFirst thing to do, is to map the name of the function to the ordinal number of the exported\nsymbol. Therefore, just walk the arrays defined by `AddressOfNames` and `AddressOfNameOrdinals`\nparallel until you found the required name.\n\nNow you can use the ordinal number to read the address by evaluating the n-th element of the\n`AddressOfFunctions` array.\n\n\nFreeing the library\n====================\n\nTo free the custom loaded library, perform the steps\n\n- Call entry point to notify library about being detached::\n\n\tDllEntryProc entry = (DllEntryProc)(baseAddress + PEHeader->OptionalHeader.AddressOfEntryPoint);\n\t(*entry)((HINSTANCE)baseAddress, DLL_PROCESS_ATTACH, 0);\n    \n- Free external libraries used to resolve imports.\n- Free allocated memory.\n\n\nMemoryModule\n=============\n\nMemoryModule is a C-library that can be used to load a DLL from memory.\n\nThe interface is very similar to the standard methods for loading of libraries::\n\n    typedef void *HMEMORYMODULE;\n    \n    HMEMORYMODULE MemoryLoadLibrary(const void *);\n    FARPROC MemoryGetProcAddress(HMEMORYMODULE, const char *);\n    void MemoryFreeLibrary(HMEMORYMODULE);\n\n\nDownloads\n----------\n\nThe latest development release can always be grabbed from my development SVN-Server at\nhttps://leviathan.joachim-bauch.de/cgi-bin/viewcvs.cgi/MemoryModule/trunk/?root=misc\n\nPlease note that it's located in my room so it doesn't run 24/7 and is often offline during\nnights or on weekends.  If you encounter problems connecting, please try again some other\ntime of day.\n\nAll released versions can be downloaded from the list below.\n\n\nKnown issues\n-------------\n\n- All memory that is not protected by section flags is gets committed using `PAGE_READWRITE`.\n  I don't know if this is correct.\n\n\nLicense\n--------\n\nThe MemoryModule library is released under the Lesser General Public License (LGPL).\n\nIt is provided as-is without ANY warranty.  You may use it at your own risk.\n\n\nCopyright\n==========\n\nThe MemoryModule library and this tutorial are\nCopyright (c) 2004 by Joachim Bauch.\n",
      "summary": ":Author: Joachim Bauch :Contact: mail@joachim-bauch.de .. contents::",
      "line_count": 548,
      "word_count": 2237,
      "last_modified": "2023-01-18T20:20:33.096678"
    },
    {
      "path": "nja2dat_simplified/v_2.o/py2exe-0.6.9/README.txt",
      "absolute_path": "/home/snow/Documents/Projects/github-repositories/bkocis/pie/nja2dat_simplified/v_2.o/py2exe-0.6.9/README.txt",
      "size": 2059,
      "content": "A new and improved py2exe for Python 2.3\n========================================\n\nUses the zipimport mechanism, so it requires Python 2.3 or later.  The\nzipimport mechanism is able to handle the early imports of the\nwarnings and also the encodings module which is done by Python.\n\nCreates a single directory, which must be deployed completely.\n\n(Most of this is based on ideas of Mark Hammond, he also implemented\nmost if the code:) Can create any number of console and gui\nexecutables in this directory, plus optionally windows service exes,\nplus optionally exe and dll com servers.  The com servers can expose\none or more com object classes.\n\nAll pure Python files are contained in a single zip archive, which is\nshared by all the executables.  The zip archive may also be used by\nprograms embedding Python.  Since extension modules cannot be imported\nfrom zipfiles, a simple pure Python loader is included in the zipfile\nwhich loads the extension from the file system (without requiring that\nthe directory is in sys.path).\n\nThe executables run with only a single sys.path entry containing the\nabsolute filename of the zipfile archive. Absolute filenames are\nconstructed at runtime from the directory containing the executable,\nand the zipfile name specified at build time.\n\nThe way has changed how build targets are specified in the setup\nscript. py2exe installs it own Distribution subclass, which enables\nadditional keyword arguments to the setup function:\n\nconsole = [...] # list of scripts to convert into console executables\nwindows = [...] # list of scripts to convert into gui executables\ncom_servers = [...] # list of fully qualified class names to build into the exe com server\nservice = [...] # list of fully qualified class names to build into a service executable\nisapi = [...], # list of script names to build into an ISAPI extension.\nzipfile = \"xxx.zip\" # filename of the zipfile containing the pure Python modules\n\nAll of the above arguments are optional. The zipfile name defaults to\n'library.zip'.\n",
      "summary": "A new and improved py2exe for Python 2.3 ======================================== Uses the zipimport mechanism, so it requires Python 2.3 or later.  The",
      "line_count": 40,
      "word_count": 329,
      "last_modified": "2023-01-18T20:20:33.092678"
    },
    {
      "path": "nja2dat_simplified/v_2.o/py2exe-0.6.9/source/README-MemoryModule.txt",
      "absolute_path": "/home/snow/Documents/Projects/github-repositories/bkocis/pie/nja2dat_simplified/v_2.o/py2exe-0.6.9/source/README-MemoryModule.txt",
      "size": 19252,
      "content": ":Author: Joachim Bauch\n:Contact: mail@joachim-bauch.de\n\n\n.. contents::\n\n\nOverview\n=========\n\nThe default windows API functions to load external libraries into a program\n(LoadLibrary, LoadLibraryEx) only work with files on the filesystem.  It's\ntherefore impossible to load a DLL from memory.\nBut sometimes, you need exactly this functionality (e.g. you don't want to\ndistribute a lot of files or want to make disassembling harder).  Common\nworkarounds for this problems are to write the DLL into a temporary file\nfirst and import it from there.  When the program terminates, the temporary\nfile gets deleted.\n\nIn this tutorial, I will describe first, how DLL files are structured and\nwill present some code that can be used to load a DLL completely from memory -\nwithout storing on the disk first.\n\n\nWindows executables - the PE format\n====================================\n\nMost windows binaries that can contain executable code (.exe, .dll, .sys)\nshare a common file format that consists of the following parts:\n\n+----------------+\n| DOS header     |\n|                |\n| DOS stub       |\n+----------------+\n| PE header      |\n+----------------+\n| Section header |\n+----------------+\n| Section 1      |\n+----------------+\n| Section 2      |\n+----------------+\n| . . .          |\n+----------------+\n| Section n      |\n+----------------+\n\nAll structures given below can be found in the header file `winnt.h`.\n\n\nDOS header / stub\n------------------\n\nThe DOS header is only used for backwards compatibility.  It precedes the DOS\nstub that normally just displays an error message about the program not being\nable to be run from DOS mode.\n\nMicrosoft defines the DOS header as follows::\n    \n    typedef struct _IMAGE_DOS_HEADER {      // DOS .EXE header\n        WORD   e_magic;                     // Magic number\n        WORD   e_cblp;                      // Bytes on last page of file\n        WORD   e_cp;                        // Pages in file\n        WORD   e_crlc;                      // Relocations\n        WORD   e_cparhdr;                   // Size of header in paragraphs\n        WORD   e_minalloc;                  // Minimum extra paragraphs needed\n        WORD   e_maxalloc;                  // Maximum extra paragraphs needed\n        WORD   e_ss;                        // Initial (relative) SS value\n        WORD   e_sp;                        // Initial SP value\n        WORD   e_csum;                      // Checksum\n        WORD   e_ip;                        // Initial IP value\n        WORD   e_cs;                        // Initial (relative) CS value\n        WORD   e_lfarlc;                    // File address of relocation table\n        WORD   e_ovno;                      // Overlay number\n        WORD   e_res[4];                    // Reserved words\n        WORD   e_oemid;                     // OEM identifier (for e_oeminfo)\n        WORD   e_oeminfo;                   // OEM information; e_oemid specific\n        WORD   e_res2[10];                  // Reserved words\n        LONG   e_lfanew;                    // File address of new exe header\n      } IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;\n\n\nPE header\n----------\n\nThe PE header contains informations about the different sections inside the\nexecutable that are used to store code and data or to define imports from other\nlibraries or exports this libraries provides.\n\nIt's defined as follows::\n\n    typedef struct _IMAGE_NT_HEADERS {\n        DWORD Signature;\n        IMAGE_FILE_HEADER FileHeader;\n        IMAGE_OPTIONAL_HEADER32 OptionalHeader;\n    } IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;\n\nThe `FileHeader` describes the *physical* format of the file, i.e. contents, informations\nabout symbols, etc::\n\n    typedef struct _IMAGE_FILE_HEADER {\n        WORD    Machine;\n        WORD    NumberOfSections;\n        DWORD   TimeDateStamp;\n        DWORD   PointerToSymbolTable;\n        DWORD   NumberOfSymbols;\n        WORD    SizeOfOptionalHeader;\n        WORD    Characteristics;\n    } IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;\n\n.. _OptionalHeader:\n\nThe `OptionalHeader` contains informations about the *logical* format of the library, \nincluding required OS version, memory requirements and entry points::\n\n    typedef struct _IMAGE_OPTIONAL_HEADER {\n        //\n        // Standard fields.\n        //\n    \n        WORD    Magic;\n        BYTE    MajorLinkerVersion;\n        BYTE    MinorLinkerVersion;\n        DWORD   SizeOfCode;\n        DWORD   SizeOfInitializedData;\n        DWORD   SizeOfUninitializedData;\n        DWORD   AddressOfEntryPoint;\n        DWORD   BaseOfCode;\n        DWORD   BaseOfData;\n    \n        //\n        // NT additional fields.\n        //\n    \n        DWORD   ImageBase;\n        DWORD   SectionAlignment;\n        DWORD   FileAlignment;\n        WORD    MajorOperatingSystemVersion;\n        WORD    MinorOperatingSystemVersion;\n        WORD    MajorImageVersion;\n        WORD    MinorImageVersion;\n        WORD    MajorSubsystemVersion;\n        WORD    MinorSubsystemVersion;\n        DWORD   Win32VersionValue;\n        DWORD   SizeOfImage;\n        DWORD   SizeOfHeaders;\n        DWORD   CheckSum;\n        WORD    Subsystem;\n        WORD    DllCharacteristics;\n        DWORD   SizeOfStackReserve;\n        DWORD   SizeOfStackCommit;\n        DWORD   SizeOfHeapReserve;\n        DWORD   SizeOfHeapCommit;\n        DWORD   LoaderFlags;\n        DWORD   NumberOfRvaAndSizes;\n        IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];\n    } IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;\n\n.. _DataDirectory:\n\nThe `DataDirectory` contains 16 (`IMAGE_NUMBEROF_DIRECTORY_ENTRIES`) entries\ndefining the logical components of the library:\n\n===== ==========================\nIndex Description\n===== ==========================\n0     Exported functions\n----- --------------------------\n1     Imported functions\n----- --------------------------\n2     Resources\n----- --------------------------\n3     Exception informations\n----- --------------------------\n4     Security informations\n----- --------------------------\n5     Base relocation table\n----- --------------------------\n6     Debug informations\n----- --------------------------\n7     Architecture specific data\n----- --------------------------\n8     Global pointer\n----- --------------------------\n9     Thread local storage\n----- --------------------------\n10    Load configuration\n----- --------------------------\n11    Bound imports\n----- --------------------------\n12    Import address table\n----- --------------------------\n13    Delay load imports\n----- --------------------------\n14    COM runtime descriptor\n===== ==========================\n\nFor importing the DLL we only need the entries describing the imports and the\nbase relocation table.  In order to provide access to the exported functions,\nthe exports entry is required.\n\n\nSection header\n---------------\n\nThe section header is stored after the OptionalHeader_ structure in the PE\nheader.  Microsoft provides the macro `IMAGE_FIRST_SECTION` to get the start\naddress based on the PE header.\n\nActually, the section header is a list of informations about each section in\nthe file::\n\n    typedef struct _IMAGE_SECTION_HEADER {\n        BYTE    Name[IMAGE_SIZEOF_SHORT_NAME];\n        union {\n                DWORD   PhysicalAddress;\n                DWORD   VirtualSize;\n        } Misc;\n        DWORD   VirtualAddress;\n        DWORD   SizeOfRawData;\n        DWORD   PointerToRawData;\n        DWORD   PointerToRelocations;\n        DWORD   PointerToLinenumbers;\n        WORD    NumberOfRelocations;\n        WORD    NumberOfLinenumbers;\n        DWORD   Characteristics;\n    } IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;\n\nA section can contain code, data, relocation informations, resources, export or\nimport definitions, etc.\n\n\nLoading the library\n====================\n\nTo emulate the PE loader, we must first understand, which steps are neccessary\nto load the file to memory and prepare the structures so they can be called from\nother programs.\n\nWhen issuing the API call `LoadLibrary`, Windows basically performs these tasks:\n\n1. Open the given file and check the DOS and PE headers.\n\n2. Try to allocate a memory block of `PEHeader.OptionalHeader.SizeOfImage` bytes\n   at position `PEHeader.OptionalHeader.ImageBase`.\n   \n3. Parse section headers and copy sections to their addresses.  The destination\n   address for each section, relative to the base of the allocated memory block,\n   is stored in the `VirtualAddress` attribute of the `IMAGE_SECTION_HEADER`\n   structure.\n   \n4. If the allocated memory block differs from `ImageBase`, various references in\n   the code and/or data sections must be adjusted.  This is called *Base\n   relocation*.\n   \n5. The required imports for the library must be resolved by loading the\n   corresponding libraries.\n   \n6. The memory regions of the different sections must be protected depending on\n   the section's characteristics.  Some sections are marked as *discardable*\n   and therefore can be safely freed at this point.  These sections normally\n   contain temporary data that is only needed during the import, like the\n   informations for the base relocation.\n   \n7. Now the library is loaded completely.  It must be notified about this by\n   calling the entry point using the flag `DLL_PROCESS_ATTACH`.\n\nIn the following paragraphs, each step is described.\n\n\nAllocate memory\n----------------\n\nAll memory required for the library must be reserved / allocated using\n`VirtualAlloc`, as Windows provides functions to protect these memory blocks.\nThis is required to restrict access to the memory, like blocking write access\nto the code or constant data.\n\nThe OptionalHeader_ structure defines the size of the required memory block\nfor the library.  It must be reserved at the address specified by `ImageBase`\nif possible::\n\n    memory = VirtualAlloc((LPVOID)(PEHeader->OptionalHeader.ImageBase),\n        PEHeader->OptionalHeader.SizeOfImage,\n        MEM_RESERVE,\n        PAGE_READWRITE);\n\nIf the reserved memory differs from the address given in `ImageBase`, base\nrelocation as described below must be done.\n\n\nCopy sections\n--------------\n\nOnce the memory has been reserved, the file contents can be copied to the\nsystem.  The section header must get evaluated in order to determine the\nposition in the file and the target area in memory.\n\nBefore copying the data, the memory block must get committed::\n\n    dest = VirtualAlloc(baseAddress + section->VirtualAddress,\n        section->SizeOfRawData,\n        MEM_COMMIT,\n        PAGE_READWRITE);\n\nSections without data in the file (like data sections for the used variables)\nhave a `SizeOfRawData` of `0`, so you can use the `SizeOfInitializedData`\nor `SizeOfUninitializedData` of the OptionalHeader_.  Which one must get\nchoosen depending on the bit flags `IMAGE_SCN_CNT_INITIALIZED_DATA` and\n`IMAGE_SCN_CNT_UNINITIALIZED_DATA` that may be set in the section`s\ncharacteristics.\n\n\nBase relocation\n----------------\n\nAll memory addresses in the code / data sections of a library are stored relative\nto the address defined by `ImageBase` in the OptionalHeader_.  If the library\ncan't be imported to this memory address, the references must get adjusted\n=> *relocated*.  The file format helps for this by storing informations about\nall these references in the base relocation table, which can be found in the\ndirectory entry 5 of the DataDirectory_ in the OptionalHeader_.\n\nThis table consists of a series of this structure\n\n::\n\n    typedef struct _IMAGE_BASE_RELOCATION {\n        DWORD   VirtualAddress;\n        DWORD   SizeOfBlock;\n    } IMAGE_BASE_RELOCATION;\n\nIt contains `(SizeOfBlock - IMAGE_SIZEOF_BASE_RELOCATION) / 2` entries of 16 bits\neach.  The upper 4 bits define the type of relocation, the lower 12 bits define\nthe offset relative to the `VirtualAddress`.\n\nThe only types that seem to be used in DLLs are\n\nIMAGE_REL_BASED_ABSOLUTE\n    No operation relocation.  Used for padding.\nIMAGE_REL_BASED_HIGHLOW\n    Add the delta between the `ImageBase` and the allocated memory block to the\n    32 bits found at the offset.\n\n\nResolve imports\n----------------\n\nThe directory entry 1 of the DataDirectory_ in the OptionalHeader_ specifies\na list of libraries to import symbols from.  Each entry in this list is defined\nas follows::\n\n    typedef struct _IMAGE_IMPORT_DESCRIPTOR {\n        union {\n            DWORD   Characteristics;            // 0 for terminating null import descriptor\n            DWORD   OriginalFirstThunk;         // RVA to original unbound IAT (PIMAGE_THUNK_DATA)\n        };\n        DWORD   TimeDateStamp;                  // 0 if not bound,\n                                                // -1 if bound, and real date\\time stamp\n                                                //     in IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT (new BIND)\n                                                // O.W. date/time stamp of DLL bound to (Old BIND)\n    \n        DWORD   ForwarderChain;                 // -1 if no forwarders\n        DWORD   Name;\n        DWORD   FirstThunk;                     // RVA to IAT (if bound this IAT has actual addresses)\n    } IMAGE_IMPORT_DESCRIPTOR;\n\nThe `Name` entry describes the offset to the NULL-terminated string of the library\nname (e.g. `KERNEL32.DLL`).  The `OriginalFirstThunk` entry points to a list\nof references to the function names to import from the external library.\n`FirstThunk` points to a list of addresses that gets filled with pointers to\nthe imported symbols.\n\nWhen we resolve the imports, we walk both lists in parallel, import the function\ndefined by the name in the first list and store the pointer to the symbol in the\nsecond list::\n\n    nameRef = (DWORD *)(baseAddress + importDesc->OriginalFirstThunk);\n    symbolRef = (DWORD *)(baseAddress + importDesc->FirstThunk);\n    for (; *nameRef; nameRef++, symbolRef++)\n    {\n        PIMAGE_IMPORT_BY_NAME thunkData = (PIMAGE_IMPORT_BY_NAME)(codeBase + *nameRef);\n        *symbolRef = (DWORD)GetProcAddress(handle, (LPCSTR)&thunkData->Name);\n        if (*funcRef == 0)\n        {\n            handleImportError();\n            return;\n        }\n    }\n\n\nProtect memory\n---------------\n\nEvery section specifies permission flags in it's `Characteristics` entry.\nThese flags can be one or a combination of\n\nIMAGE_SCN_MEM_EXECUTE\n    The section contains data that can be executed.\n    \nIMAGE_SCN_MEM_READ\n    The section contains data that is readable.\n    \nIMAGE_SCN_MEM_WRITE\n    The section contains data that is writeable.\n\nThese flags must get mapped to the protection flags\n\n- PAGE_NOACCESS\n- PAGE_WRITECOPY\n- PAGE_READONLY\n- PAGE_READWRITE\n- PAGE_EXECUTE\n- PAGE_EXECUTE_WRITECOPY\n- PAGE_EXECUTE_READ\n- PAGE_EXECUTE_READWRITE\n\nNow, the function `VirtualProtect` can be used to limit access to the memory.\nIf the program tries to access it in a unauthorized way, an exception gets\nraised by Windows.\n\nIn addition the section flags above, the following can be added:\n\nIMAGE_SCN_MEM_DISCARDABLE\n    The data in this section can be freed after the import.  Usually this is\n    specified for relocation data.\n    \nIMAGE_SCN_MEM_NOT_CACHED\n    The data in this section must not get cached by Windows.  Add the bit\n    flag `PAGE_NOCACHE` to the protection flags above.\n\n\nNotify library\n---------------\n\nThe last thing to do is to call the DLL entry point (defined by\n`AddressOfEntryPoint`) and so notifying the library about being attached\nto a process.\n\nThe function at the entry point is defined as\n\n::\n    \n    typedef BOOL (WINAPI *DllEntryProc)(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved);\n\nSo the last code we need to execute is\n\n::\n\n\tDllEntryProc entry = (DllEntryProc)(baseAddress + PEHeader->OptionalHeader.AddressOfEntryPoint);\n\t(*entry)((HINSTANCE)baseAddress, DLL_PROCESS_ATTACH, 0);\n\nAfterwards we can use the exported functions as with any normal library.\n\n\nExported functions\n===================\n\nIf you want to access the functions that are exported by the library, you need to find the entry\npoint to a symbol, i.e. the name of the function to call.\n\nThe directory entry 0 of the DataDirectory_ in the OptionalHeader_ contains informations about\nthe exported functions. It's defined as follows::\n\n    typedef struct _IMAGE_EXPORT_DIRECTORY {\n        DWORD   Characteristics;\n        DWORD   TimeDateStamp;\n        WORD    MajorVersion;\n        WORD    MinorVersion;\n        DWORD   Name;\n        DWORD   Base;\n        DWORD   NumberOfFunctions;\n        DWORD   NumberOfNames;\n        DWORD   AddressOfFunctions;     // RVA from base of image\n        DWORD   AddressOfNames;         // RVA from base of image\n        DWORD   AddressOfNameOrdinals;  // RVA from base of image\n    } IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;\n\nFirst thing to do, is to map the name of the function to the ordinal number of the exported\nsymbol. Therefore, just walk the arrays defined by `AddressOfNames` and `AddressOfNameOrdinals`\nparallel until you found the required name.\n\nNow you can use the ordinal number to read the address by evaluating the n-th element of the\n`AddressOfFunctions` array.\n\n\nFreeing the library\n====================\n\nTo free the custom loaded library, perform the steps\n\n- Call entry point to notify library about being detached::\n\n\tDllEntryProc entry = (DllEntryProc)(baseAddress + PEHeader->OptionalHeader.AddressOfEntryPoint);\n\t(*entry)((HINSTANCE)baseAddress, DLL_PROCESS_ATTACH, 0);\n    \n- Free external libraries used to resolve imports.\n- Free allocated memory.\n\n\nMemoryModule\n=============\n\nMemoryModule is a C-library that can be used to load a DLL from memory.\n\nThe interface is very similar to the standard methods for loading of libraries::\n\n    typedef void *HMEMORYMODULE;\n    \n    HMEMORYMODULE MemoryLoadLibrary(const void *);\n    FARPROC MemoryGetProcAddress(HMEMORYMODULE, const char *);\n    void MemoryFreeLibrary(HMEMORYMODULE);\n\n\nDownloads\n----------\n\nThe latest development release can always be grabbed from my development SVN-Server at\nhttps://leviathan.joachim-bauch.de/cgi-bin/viewcvs.cgi/MemoryModule/trunk/?root=misc\n\nPlease note that it's located in my room so it doesn't run 24/7 and is often offline during\nnights or on weekends.  If you encounter problems connecting, please try again some other\ntime of day.\n\nAll released versions can be downloaded from the list below.\n\n\nKnown issues\n-------------\n\n- All memory that is not protected by section flags is gets committed using `PAGE_READWRITE`.\n  I don't know if this is correct.\n\n\nLicense\n--------\n\nThe MemoryModule library is released under the Lesser General Public License (LGPL).\n\nIt is provided as-is without ANY warranty.  You may use it at your own risk.\n\n\nCopyright\n==========\n\nThe MemoryModule library and this tutorial are\nCopyright (c) 2004 by Joachim Bauch.\n",
      "summary": ":Author: Joachim Bauch :Contact: mail@joachim-bauch.de .. contents::",
      "line_count": 548,
      "word_count": 2237,
      "last_modified": "2023-01-18T20:20:33.096678"
    },
    {
      "path": "nja2dat_simplified/v_2.o/py2exe-0.6.9/py2exe/samples/pywin32/com_server/README.txt",
      "absolute_path": "/home/snow/Documents/Projects/github-repositories/bkocis/pie/nja2dat_simplified/v_2.o/py2exe-0.6.9/py2exe/samples/pywin32/com_server/README.txt",
      "size": 516,
      "content": "This is a sample of a COM object ('server') implemented in Python.\n\nThis builds the pywin32 sample COM object 'interp' - see the win32com\\servers \ndirectory.\n\nExecute:\n\n  setup.py py2exe\n\nAnd in the dist directory you will find interp.exe and inter.dll.\n\nYou can register the objects with 'interp.exe /regserver' or \n'regsvr32 interp.dll'.  'interp.exe /unregister' and 'regsvr32 /u interp.dll'\nwill unregister the objects.\n\nOnce registered, test the object using 'test_interp.py' or 'test_interp.vbs'",
      "summary": "This is a sample of a COM object ('server') implemented in Python. This builds the pywin32 sample COM object 'interp' - see the win32com\\servers directory.",
      "line_count": 16,
      "word_count": 69,
      "last_modified": "2023-01-18T20:20:33.092678"
    },
    {
      "path": "nja2dat_simplified/v_2.o/py2exe-0.6.9/py2exe/samples/pywin32/isapi/README.txt",
      "absolute_path": "/home/snow/Documents/Projects/github-repositories/bkocis/pie/nja2dat_simplified/v_2.o/py2exe-0.6.9/py2exe/samples/pywin32/isapi/README.txt",
      "size": 429,
      "content": "A pywin32 ISAPI sample.\n\nThis builds the pywin32 isapi 'redirector' sample (see \nsite-packages\\isapi\\samples) into a py2exe distribution.  Execute:\n\n  setup.py py2exe\n\nand in the 'dist' directory you will find 'redirector.exe' (used to\nregister/unregister the ISAPI extension), and 'redirector.dll' (the ISAPI\nfilter and extension loaded by IIS.)\n\nSee the pywin32 sample for more details about how to use the sample.\n",
      "summary": "A pywin32 ISAPI sample. This builds the pywin32 isapi 'redirector' sample (see site-packages\\isapi\\samples) into a py2exe distribution.  Execute:",
      "line_count": 12,
      "word_count": 58,
      "last_modified": "2023-01-18T20:20:33.096678"
    },
    {
      "path": "nja2dat_simplified/v_2.o/py2exe-0.6.9/py2exe/samples/pywin32/com_typelib/README.txt",
      "absolute_path": "/home/snow/Documents/Projects/github-repositories/bkocis/pie/nja2dat_simplified/v_2.o/py2exe-0.6.9/py2exe/samples/pywin32/com_typelib/README.txt",
      "size": 1406,
      "content": "Some py2exe samples relating to the use of typelibs and pywin32.\n\npywin32's COM support takes advantage of COM typelibs by generating Python\nstubs for the objects in these typelibs.  This generation is often known as\na 'makepy' process, from the name of the script that performs the generation,\nbut it is not always necessary to explcitly invoke makepy.py - the use of\nwin32com.client.gencache will often cause implicit generation of these stubs.\n\nThis directory contains samples showing how to use these techniques with \npy2exe apps.  It contains the following samples.\n\nbuild_gen: contains samples that demonstrate how to build a typelib as py2exe\n           is run.  This means the machine running py2exe must have the \n           typelibs installed locally, but the target machines need not.\n           py2exe generates the typelib stubs as it is run.\n\n           There is currently a single sample which assumes MSWord is \n           installed.  Please contribute samples for other common objects!\n\npre_gen:   contains samples that demonstrate how to package typelib stubs \n           previously generated.  Such stubs will have come from a previous\n           invocation of makepy, possibly on another computer and possibly\n           from a source control system.  In this case, the computer running\n           py2exe does *not* need to have the relevant typelibs installed.\n",
      "summary": "Some py2exe samples relating to the use of typelibs and pywin32. pywin32's COM support takes advantage of COM typelibs by generating Python stubs for the objects in these typelibs.  This generation is often known as",
      "line_count": 24,
      "word_count": 198,
      "last_modified": "2023-01-18T20:20:33.092678"
    },
    {
      "path": "nja2dat_simplified/v_2.o/py2exe-0.6.9/py2exe/samples/user_access_control/README.txt",
      "absolute_path": "/home/snow/Documents/Projects/github-repositories/bkocis/pie/nja2dat_simplified/v_2.o/py2exe-0.6.9/py2exe/samples/user_access_control/README.txt",
      "size": 2363,
      "content": "This is a sample for how to control Vista's user-access-control for your\npy2exe created programs.\n\nExecute 'python setup.py py2exe' to create various executables, all with\ndifferent manifest values.  Each of these may behave slightly differently\nwhen executed under Vista.\n\nImportant:\n----------\n\nThere is an important difference between Python 2.6 versus\nearlier versions.\n\nPython 2.5 and before created executables will not have a manifest\nby default, meaning a backwards compatibility virtualization mode\nmay be used by default.  However, if you specify any value for 'uac_info'\nthis virtualization will be disabled as it will cause a manifest to be\ncreated for the executable.\n\nTo demonstrate on Vista:\n\n* Using an elevated process, create a temp directory under \"C:\\Program Files\"\n  and copy the generated 'dist' directory to that temp dir.\n\n* From a non-elevated command-prompt, execute:\n    c:\\Program Files\\temp\\not_specified.exe -e foo\n\n  You will see an error dialog due to 'foo' being written to stderr. The\n  error dialog will tell you the log file was written to the \n  \"C:\\Program Files\\temp\" directory, but that log file will not exist\n  in that directory - instead, it will be in the\n  \"C:\\Users\\{username}\\AppData\\Local\\VirtualStore\\Program Files (x86)\\temp\"\n  directory - Windows has virtualized the file-system.  Similar things will\n  be able to be demonstrated with the registry.\n\n* From a non-elevated command-prompt, execute:\n    c:\\Program Files\\temp\\as_invoker.exe -e foo\n\n  You will see an error dialog, but it will be slightly different - it\n  will relate to a failure to open the log file in the \"c:\\Program Files\\temp\"\n  directory.  In this case, Windows has *not* virtualized the file-system but\n  your process does not have permission to write in that directory, so it \n  fails to write a log file at all.\n\n* From a non-elevated command-prompt, execute:\n    c:\\Program Files\\temp\\admin_required.exe -e foo\n\n  You will be prompted to elevate the process, then a log file will be\n  written to \"C:\\Program Files\\temp\" as the permissions exists in the \n  elevated process.\n\nNOTE: For Python 2.6 and later there is always a manifest, so virtualization\nis always disabled.  In other words, in Python 2.6, not_specified.exe will \nwork exactly like as_invoker.exe does for all versions.\n",
      "summary": "This is a sample for how to control Vista's user-access-control for your py2exe created programs. Execute 'python setup.py py2exe' to create various executables, all with",
      "line_count": 54,
      "word_count": 342,
      "last_modified": "2023-01-18T20:20:33.096678"
    },
    {
      "path": "nja2dat_simplified/v_2.o/py2exe/samples/pywin32/com_server/README.txt",
      "absolute_path": "/home/snow/Documents/Projects/github-repositories/bkocis/pie/nja2dat_simplified/v_2.o/py2exe/samples/pywin32/com_server/README.txt",
      "size": 516,
      "content": "This is a sample of a COM object ('server') implemented in Python.\n\nThis builds the pywin32 sample COM object 'interp' - see the win32com\\servers \ndirectory.\n\nExecute:\n\n  setup.py py2exe\n\nAnd in the dist directory you will find interp.exe and inter.dll.\n\nYou can register the objects with 'interp.exe /regserver' or \n'regsvr32 interp.dll'.  'interp.exe /unregister' and 'regsvr32 /u interp.dll'\nwill unregister the objects.\n\nOnce registered, test the object using 'test_interp.py' or 'test_interp.vbs'",
      "summary": "This is a sample of a COM object ('server') implemented in Python. This builds the pywin32 sample COM object 'interp' - see the win32com\\servers directory.",
      "line_count": 16,
      "word_count": 69,
      "last_modified": "2023-01-18T20:20:33.096678"
    },
    {
      "path": "nja2dat_simplified/v_2.o/py2exe/samples/pywin32/isapi/README.txt",
      "absolute_path": "/home/snow/Documents/Projects/github-repositories/bkocis/pie/nja2dat_simplified/v_2.o/py2exe/samples/pywin32/isapi/README.txt",
      "size": 429,
      "content": "A pywin32 ISAPI sample.\n\nThis builds the pywin32 isapi 'redirector' sample (see \nsite-packages\\isapi\\samples) into a py2exe distribution.  Execute:\n\n  setup.py py2exe\n\nand in the 'dist' directory you will find 'redirector.exe' (used to\nregister/unregister the ISAPI extension), and 'redirector.dll' (the ISAPI\nfilter and extension loaded by IIS.)\n\nSee the pywin32 sample for more details about how to use the sample.\n",
      "summary": "A pywin32 ISAPI sample. This builds the pywin32 isapi 'redirector' sample (see site-packages\\isapi\\samples) into a py2exe distribution.  Execute:",
      "line_count": 12,
      "word_count": 58,
      "last_modified": "2023-01-18T20:20:33.096678"
    },
    {
      "path": "nja2dat_simplified/v_2.o/py2exe/samples/pywin32/com_typelib/README.txt",
      "absolute_path": "/home/snow/Documents/Projects/github-repositories/bkocis/pie/nja2dat_simplified/v_2.o/py2exe/samples/pywin32/com_typelib/README.txt",
      "size": 1406,
      "content": "Some py2exe samples relating to the use of typelibs and pywin32.\n\npywin32's COM support takes advantage of COM typelibs by generating Python\nstubs for the objects in these typelibs.  This generation is often known as\na 'makepy' process, from the name of the script that performs the generation,\nbut it is not always necessary to explcitly invoke makepy.py - the use of\nwin32com.client.gencache will often cause implicit generation of these stubs.\n\nThis directory contains samples showing how to use these techniques with \npy2exe apps.  It contains the following samples.\n\nbuild_gen: contains samples that demonstrate how to build a typelib as py2exe\n           is run.  This means the machine running py2exe must have the \n           typelibs installed locally, but the target machines need not.\n           py2exe generates the typelib stubs as it is run.\n\n           There is currently a single sample which assumes MSWord is \n           installed.  Please contribute samples for other common objects!\n\npre_gen:   contains samples that demonstrate how to package typelib stubs \n           previously generated.  Such stubs will have come from a previous\n           invocation of makepy, possibly on another computer and possibly\n           from a source control system.  In this case, the computer running\n           py2exe does *not* need to have the relevant typelibs installed.\n",
      "summary": "Some py2exe samples relating to the use of typelibs and pywin32. pywin32's COM support takes advantage of COM typelibs by generating Python stubs for the objects in these typelibs.  This generation is often known as",
      "line_count": 24,
      "word_count": 198,
      "last_modified": "2023-01-18T20:20:33.096678"
    },
    {
      "path": "nja2dat_simplified/v_2.o/py2exe/samples/user_access_control/README.txt",
      "absolute_path": "/home/snow/Documents/Projects/github-repositories/bkocis/pie/nja2dat_simplified/v_2.o/py2exe/samples/user_access_control/README.txt",
      "size": 2363,
      "content": "This is a sample for how to control Vista's user-access-control for your\npy2exe created programs.\n\nExecute 'python setup.py py2exe' to create various executables, all with\ndifferent manifest values.  Each of these may behave slightly differently\nwhen executed under Vista.\n\nImportant:\n----------\n\nThere is an important difference between Python 2.6 versus\nearlier versions.\n\nPython 2.5 and before created executables will not have a manifest\nby default, meaning a backwards compatibility virtualization mode\nmay be used by default.  However, if you specify any value for 'uac_info'\nthis virtualization will be disabled as it will cause a manifest to be\ncreated for the executable.\n\nTo demonstrate on Vista:\n\n* Using an elevated process, create a temp directory under \"C:\\Program Files\"\n  and copy the generated 'dist' directory to that temp dir.\n\n* From a non-elevated command-prompt, execute:\n    c:\\Program Files\\temp\\not_specified.exe -e foo\n\n  You will see an error dialog due to 'foo' being written to stderr. The\n  error dialog will tell you the log file was written to the \n  \"C:\\Program Files\\temp\" directory, but that log file will not exist\n  in that directory - instead, it will be in the\n  \"C:\\Users\\{username}\\AppData\\Local\\VirtualStore\\Program Files (x86)\\temp\"\n  directory - Windows has virtualized the file-system.  Similar things will\n  be able to be demonstrated with the registry.\n\n* From a non-elevated command-prompt, execute:\n    c:\\Program Files\\temp\\as_invoker.exe -e foo\n\n  You will see an error dialog, but it will be slightly different - it\n  will relate to a failure to open the log file in the \"c:\\Program Files\\temp\"\n  directory.  In this case, Windows has *not* virtualized the file-system but\n  your process does not have permission to write in that directory, so it \n  fails to write a log file at all.\n\n* From a non-elevated command-prompt, execute:\n    c:\\Program Files\\temp\\admin_required.exe -e foo\n\n  You will be prompted to elevate the process, then a log file will be\n  written to \"C:\\Program Files\\temp\" as the permissions exists in the \n  elevated process.\n\nNOTE: For Python 2.6 and later there is always a manifest, so virtualization\nis always disabled.  In other words, in Python 2.6, not_specified.exe will \nwork exactly like as_invoker.exe does for all versions.\n",
      "summary": "This is a sample for how to control Vista's user-access-control for your py2exe created programs. Execute 'python setup.py py2exe' to create various executables, all with",
      "line_count": 54,
      "word_count": 342,
      "last_modified": "2023-01-18T20:20:33.096678"
    }
  ],
  "file_structure": {
    "total_files": 1787,
    "total_size": 127044122,
    "file_types": {
      ".md": 5,
      ".py": 218,
      ".sh": 8,
      ".pcr": 4,
      ".irf": 1,
      ".ctrl": 81,
      ".txt": 42,
      ".dat": 66,
      ".pyc": 24,
      ".config": 5,
      ".py_______": 1,
      "": 593,
      ".log": 3,
      ".py_": 2,
      ".rst": 1,
      ".aux": 1,
      ".ind": 1,
      ".ist": 1,
      ".toc": 1,
      ".tex": 1,
      ".pdf": 3,
      ".ilg": 1,
      ".idx": 1,
      ".out": 1,
      ".sty": 3,
      ".cls": 2,
      ".html": 5,
      ".js": 7,
      ".inv": 1,
      ".png": 30,
      ".css": 5,
      ".gif": 15,
      ".doctree": 1,
      ".pickle": 1,
      ".zip": 2,
      ".dll": 14,
      ".ico": 8,
      ".nja": 1,
      ".pyd": 79,
      ".exe": 2,
      ".tcl": 120,
      ".enc": 78,
      ".msg": 145,
      ".terms": 2,
      ".xbm": 7,
      ".ppm": 18,
      ".eps": 2,
      ".glade": 1,
      ".jpg": 2,
      ".xrc": 1,
      ".csv": 4,
      ".gz": 5,
      ".npy": 2,
      ".afm": 60,
      ".ttf": 34,
      ".svg": 9,
      ".xpm": 17,
      ".rc": 2,
      ".c": 24,
      ".h": 10,
      ".in": 1,
      ".vbs": 2
    },
    "languages": {
      "Python": 218,
      "Shell": 8,
      "HTML": 5,
      "JavaScript": 7,
      "CSS": 5,
      "C": 24
    },
    "directories": [
      "Algor_for_robert",
      "algor_v2.42",
      "algorRun",
      "algor_v2.2",
      "combined_effect",
      "algor_v2.4",
      "startup",
      "Nenad",
      "algor_v2.1",
      "algor_v2.3",
      "algor_v0.254_",
      "algor_v2.0",
      "algorRun_original",
      "algor_v2.41",
      "algorRun_Win",
      "nja2dat_simplified",
      "Algor_for_robert/algorRun",
      "Algor_for_robert/Knochen",
      "Algor_for_robert/Knochen/_data_files",
      "algor_v2.42/_template",
      "algor_v2.42/analysis",
      "algor_v2.42/_template_2",
      "algor_v2.42/_template/_blocks",
      "algor_v2.42/_template_2/what_you_want_to_do",
      "algor_v2.2/analyse_and_plot",
      "algor_v2.4/_template",
      "algor_v2.4/_template/_blocks",
      "Nenad/test_Nenaed",
      "Nenad/test_Nenaed/sub",
      "algor_v0.254_/short_documentation_for_help_at_start",
      "algor_v0.254_/_template",
      "algor_v0.254_/bug-log-testing",
      "algor_v0.254_/_template/blocks_for_HAP",
      "algor_v0.254_/_template/blocks_for_lab6",
      "algor_v0.254_/_template/blocks_for_HAP/_blocks",
      "algor_v0.254_/_template/blocks_for_lab6/_blocks",
      "algorRun_original/sphinx",
      "algorRun_original/sphinx/_build",
      "algorRun_original/sphinx/_build/latex",
      "algorRun_original/sphinx/_build/html",
      "algorRun_original/sphinx/_build/doctrees",
      "algorRun_original/sphinx/_build/html/_static",
      "algorRun_original/sphinx/_build/html/_sources",
      "algor_v2.41/_template",
      "algor_v2.41/analysis",
      "algor_v2.41/_template_2",
      "algor_v2.41/_template/_blocks",
      "algor_v2.41/_template_2/what_you_want_to_do",
      "algorRun_Win/algorRun",
      "nja2dat_simplified/v_1.o",
      "nja2dat_simplified/v_2.o",
      "nja2dat_simplified/v_3.o",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/mpl-data",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tcl8.5",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tk8.5",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tcl8.5/tzdata",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tcl8.5/encoding",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tcl8.5/opt0.4",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tcl8.5/msgs",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tcl8.5/http1.0",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tcl8.5/tzdata/Mexico",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tcl8.5/tzdata/Canada",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tcl8.5/tzdata/US",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tcl8.5/tzdata/Arctic",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tcl8.5/tzdata/Pacific",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tcl8.5/tzdata/Atlantic",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tcl8.5/tzdata/Europe",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tcl8.5/tzdata/Africa",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tcl8.5/tzdata/Brazil",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tcl8.5/tzdata/Chile",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tcl8.5/tzdata/Antarctica",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tcl8.5/tzdata/Indian",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tcl8.5/tzdata/Etc",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tcl8.5/tzdata/Asia",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tcl8.5/tzdata/Australia",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tcl8.5/tzdata/America",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tcl8.5/tzdata/SystemV",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tcl8.5/tzdata/America/North_Dakota",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tcl8.5/tzdata/America/Argentina",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tcl8.5/tzdata/America/Indiana",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tcl8.5/tzdata/America/Kentucky",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tk8.5/demos",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tk8.5/msgs",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tk8.5/images",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tk8.5/ttk",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/tcl/tk8.5/demos/images",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/mpl-data/sample_data",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/mpl-data/fonts",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/mpl-data/images",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/mpl-data/sample_data/axes_grid",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/mpl-data/fonts/afm",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/mpl-data/fonts/ttf",
      "nja2dat_simplified/v_1.o/nja2dat_v1.0/mpl-data/fonts/pdfcorefonts",
      "nja2dat_simplified/v_2.o/test",
      "nja2dat_simplified/v_2.o/docs",
      "nja2dat_simplified/v_2.o/source",
      "nja2dat_simplified/v_2.o/py2exe-0.6.9",
      "nja2dat_simplified/v_2.o/py2exe",
      "nja2dat_simplified/v_2.o/test/relative_import",
      "nja2dat_simplified/v_2.o/test/relative_import/x",
      "nja2dat_simplified/v_2.o/py2exe-0.6.9/test",
      "nja2dat_simplified/v_2.o/py2exe-0.6.9/docs",
      "nja2dat_simplified/v_2.o/py2exe-0.6.9/source",
      "nja2dat_simplified/v_2.o/py2exe-0.6.9/py2exe",
      "nja2dat_simplified/v_2.o/py2exe-0.6.9/test/relative_import",
      "nja2dat_simplified/v_2.o/py2exe-0.6.9/test/relative_import/x",
      "nja2dat_simplified/v_2.o/py2exe-0.6.9/py2exe/resources",
      "nja2dat_simplified/v_2.o/py2exe-0.6.9/py2exe/samples",
      "nja2dat_simplified/v_2.o/py2exe-0.6.9/py2exe/samples/pywin32",
      "nja2dat_simplified/v_2.o/py2exe-0.6.9/py2exe/samples/advanced",
      "nja2dat_simplified/v_2.o/py2exe-0.6.9/py2exe/samples/extending",
      "nja2dat_simplified/v_2.o/py2exe-0.6.9/py2exe/samples/user_access_control",
      "nja2dat_simplified/v_2.o/py2exe-0.6.9/py2exe/samples/simple",
      "nja2dat_simplified/v_2.o/py2exe-0.6.9/py2exe/samples/singlefile",
      "nja2dat_simplified/v_2.o/py2exe-0.6.9/py2exe/samples/pywin32/com_server",
      "nja2dat_simplified/v_2.o/py2exe-0.6.9/py2exe/samples/pywin32/isapi",
      "nja2dat_simplified/v_2.o/py2exe-0.6.9/py2exe/samples/pywin32/com_typelib",
      "nja2dat_simplified/v_2.o/py2exe-0.6.9/py2exe/samples/pywin32/com_typelib/build_gen",
      "nja2dat_simplified/v_2.o/py2exe-0.6.9/py2exe/samples/pywin32/com_typelib/pre_gen",
      "nja2dat_simplified/v_2.o/py2exe-0.6.9/py2exe/samples/pywin32/com_typelib/build_gen/word",
      "nja2dat_simplified/v_2.o/py2exe-0.6.9/py2exe/samples/pywin32/com_typelib/pre_gen/wscript",
      "nja2dat_simplified/v_2.o/py2exe-0.6.9/py2exe/samples/singlefile/gui",
      "nja2dat_simplified/v_2.o/py2exe-0.6.9/py2exe/samples/singlefile/comserver",
      "nja2dat_simplified/v_2.o/py2exe/resources",
      "nja2dat_simplified/v_2.o/py2exe/samples",
      "nja2dat_simplified/v_2.o/py2exe/samples/pywin32",
      "nja2dat_simplified/v_2.o/py2exe/samples/advanced",
      "nja2dat_simplified/v_2.o/py2exe/samples/extending",
      "nja2dat_simplified/v_2.o/py2exe/samples/user_access_control",
      "nja2dat_simplified/v_2.o/py2exe/samples/simple",
      "nja2dat_simplified/v_2.o/py2exe/samples/singlefile",
      "nja2dat_simplified/v_2.o/py2exe/samples/pywin32/com_server",
      "nja2dat_simplified/v_2.o/py2exe/samples/pywin32/isapi",
      "nja2dat_simplified/v_2.o/py2exe/samples/pywin32/com_typelib",
      "nja2dat_simplified/v_2.o/py2exe/samples/pywin32/com_typelib/build_gen",
      "nja2dat_simplified/v_2.o/py2exe/samples/pywin32/com_typelib/pre_gen",
      "nja2dat_simplified/v_2.o/py2exe/samples/pywin32/com_typelib/build_gen/word",
      "nja2dat_simplified/v_2.o/py2exe/samples/pywin32/com_typelib/pre_gen/wscript",
      "nja2dat_simplified/v_2.o/py2exe/samples/singlefile/gui",
      "nja2dat_simplified/v_2.o/py2exe/samples/singlefile/comserver"
    ],
    "largest_files": [
      [
        "nja2dat_simplified/v_1.o/nja2dat_v1.0/library.zip",
        15666427
      ],
      [
        "nja2dat_simplified/v_1.o/nja2dat_v1.0/QtGui4.dll",
        8124416
      ],
      [
        "nja2dat_simplified/v_1.o/nja2dat_v1.0/scipy.linalg._flapack.pyd",
        6897971
      ],
      [
        "nja2dat_simplified/v_1.o/nja2dat_v1.0/PyQt4.QtGui.pyd",
        5818368
      ],
      [
        "nja2dat_simplified/v_1.o/nja2dat_v1.0/scipy.sparse.linalg.eigen.arpack._arpack.pyd",
        4012276
      ],
      [
        "nja2dat_simplified/v_1.o/nja2dat_v1.0/wxmsw28uh_core_vc.dll",
        3165184
      ],
      [
        "nja2dat_simplified/v_1.o/nja2dat_v1.0/scipy.sparse.linalg.dsolve._superlu.pyd",
        2822178
      ],
      [
        "nja2dat_simplified/v_1.o/nja2dat_v1.0/scipy.linalg._fblas.pyd",
        2720377
      ],
      [
        "nja2dat_simplified/v_1.o/nja2dat_v1.0/scipy.special._ufuncs.pyd",
        2551131
      ],
      [
        "nja2dat_simplified/v_1.o/nja2dat_v1.0/QtCore4.dll",
        2512384
      ]
    ]
  },
  "technologies": {
    "frameworks": [],
    "tools": [],
    "databases": [],
    "deployment": [],
    "testing": [],
    "build_systems": []
  },
  "git_info": {
    "current_branch": "master",
    "last_commit": {
      "hash": "de3edd2b9fdd180e7a0b61d3b5a91360e998d94b",
      "author_name": "mnost",
      "author_email": "balaz.kocis@gmail.com",
      "date": "Tue Aug 22 12:09:04 2017 +0200",
      "message": "latest corrections"
    },
    "remote_url": "https://github.com/bkocis/pie.git"
  },
  "content_hash": "0e95d72c2dd183dcd0556cbaafa83af6"
}